package com.oryzone.mvdetector.gui;

import com.oryzone.mvdetector.Detector;
import com.oryzone.mvdetector.DetectorOptions;
import com.oryzone.mvdetector.detectorActions.ExecuteCommandAction;
import com.oryzone.mvdetector.detectorActions.PlayBeepAction;
import com.oryzone.mvdetector.detectorActions.SaveFrameAction;
import com.oryzone.mvdetector.detectorActions.RegisterLogAction;
import com.oryzone.mvdetector.detectorEvents.DetectorStateChangedEvent;
import com.oryzone.mvdetector.detectorEvents.DetectorStateChangedListener;
import com.oryzone.mvdetector.detectorEvents.WarningEndedEvent;
import com.oryzone.mvdetector.detectorEvents.WarningListener;
import com.oryzone.mvdetector.detectorEvents.WarningSignalEvent;
import com.oryzone.mvdetector.detectorEvents.WarningStartedEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 * Main UI
 * @author Luciano Mammino, Andrea Mangano
 * @version 1.0
 */
public class MainWindow 
            extends javax.swing.JFrame 
            implements WarningListener, 
                       DetectorStateChangedListener,
                       ActionListener
{

    protected DetectorOptions detectorOptions;
    protected OptionsWindow optionsWindow;
    protected LogWindow console;
    protected Detector detector;
    protected Timer timer;
    protected int pendingSeconds;
    protected Icon iconOk;
    protected Icon iconWarning;
    protected Icon iconCapturing;
    protected Thread thread;
    protected PlayBeepAction playBeepAction;
    protected SaveFrameAction saveFrameAction;
    protected RegisterLogAction registerLogAction;
    protected ExecuteCommandAction executeCommandAction;


    public MainWindow()
    {
        initComponents();
        initCustomComponents();
        
        this.playBeepAction = new PlayBeepAction();
        this.saveFrameAction = new SaveFrameAction();
        this.registerLogAction = new RegisterLogAction();
        this.registerLogAction.setLogWindow(console);
        this.executeCommandAction = new ExecuteCommandAction();
        this.executeCommandAction.setLogWindow(console);
        
        this.timer = new Timer(1000, this);
        this.iconOk = new ImageIcon(getClass().getResource("/images/fine_small.png"));
        this.iconWarning = new ImageIcon(getClass().getResource("/images/warning_small.png"));
        this.iconCapturing = new ImageIcon(getClass().getResource("/images/recording_small.png"));
        
        prepareWindows();
        
        console.log("Application started!");
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        btn_start = new javax.swing.JButton();
        btn_stop = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btn_options = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btn_console = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        lbl_warning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MovementDetector");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(243, 30));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onFormClosing(evt);
            }
        });

        canvas.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        canvas.setPreferredSize(new java.awt.Dimension(665, 460));
        canvas.setLayout(new java.awt.BorderLayout());
        getContentPane().add(canvas, java.awt.BorderLayout.CENTER);

        toolBar.setBorder(null);
        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        btn_start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/media-record.png"))); // NOI18N
        btn_start.setText("Start");
        btn_start.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        btn_start.setFocusable(false);
        btn_start.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_start.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });
        toolBar.add(btn_start);

        btn_stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/media-playback-stop.png"))); // NOI18N
        btn_stop.setText("Stop");
        btn_stop.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        btn_stop.setEnabled(false);
        btn_stop.setFocusable(false);
        btn_stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stopActionPerformed(evt);
            }
        });
        toolBar.add(btn_stop);
        toolBar.add(jSeparator1);

        btn_options.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/preferences-system.png"))); // NOI18N
        btn_options.setText("Options");
        btn_options.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        btn_options.setFocusable(false);
        btn_options.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_options.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_optionsActionPerformed(evt);
            }
        });
        toolBar.add(btn_options);
        toolBar.add(jSeparator2);

        btn_console.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log.png"))); // NOI18N
        btn_console.setText("Log window");
        btn_console.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        btn_console.setFocusable(false);
        btn_console.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_console.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_console.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_consoleActionPerformed(evt);
            }
        });
        toolBar.add(btn_console);
        toolBar.add(jSeparator3);

        jPanel1.setLayout(new java.awt.BorderLayout());

        lbl_warning.setForeground(new java.awt.Color(0, 204, 51));
        lbl_warning.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_warning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fine_small.png"))); // NOI18N
        lbl_warning.setLabelFor(lbl_warning);
        lbl_warning.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 15));
        lbl_warning.setDoubleBuffered(true);
        jPanel1.add(lbl_warning, java.awt.BorderLayout.CENTER);

        toolBar.add(jPanel1);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void initCustomComponents()
    {
        this.detectorOptions = new DetectorOptions();
        this.detectorOptions.load();
        this.optionsWindow = new OptionsWindow(this.detectorOptions);
        this.console = new LogWindow();
    }

    private void prepareWindows()
    {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setPreferredSize(new Dimension(dim.width, this.toolBar.getHeight()));
        this.setSize(new Dimension(dim.width, this.toolBar.getHeight() + 30));
        this.setLocation(0, 0);
        this.optionsWindow.setLocation(20, this.getLocation().y + this.getHeight() + 40);
        this.console.setLocation(20, this.getLocation().y + this.getHeight() + 40);
    }

    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        this.btn_start.setEnabled(false);
        this.detector = new Detector(this.detectorOptions);
        this.detector.addWarningListener(this);
        this.detector.addStateChangedListener(this); 
        this.detector.start();
    }//GEN-LAST:event_btn_startActionPerformed

    private void btn_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stopActionPerformed
        //this.detector.beforeStop();
        //this.detector.destroy();
        //this.detector = null;
        this.detector.close();
    }//GEN-LAST:event_btn_stopActionPerformed

    private void btn_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_optionsActionPerformed
        this.optionsWindow.setVisible(!(this.optionsWindow.isVisible()));
    }//GEN-LAST:event_btn_optionsActionPerformed

    private void onFormClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onFormClosing
        this.detectorOptions.save();
    }//GEN-LAST:event_onFormClosing

    private void btn_consoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_consoleActionPerformed
        this.console.setVisible(!this.console.isVisible());
    }//GEN-LAST:event_btn_consoleActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_console;
    private javax.swing.JButton btn_options;
    private javax.swing.JButton btn_start;
    private javax.swing.JButton btn_stop;
    private javax.swing.JPanel canvas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JLabel lbl_warning;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public synchronized void actionPerformed(ActionEvent ae)
    {
        //reacts to timer actions
        if( ae.getSource() instanceof Timer )
        {
            this.pendingSeconds = this.pendingSeconds - 1;
            this.lbl_warning.setText("- " + this.pendingSeconds + " secs");
        }
    }

    @Override
    public synchronized void onWarningStarted(WarningStartedEvent e)
    {
        this.timer.start();
        
        if(this.optionsWindow.options.isActionRegisterLogEnabled())
        {
            this.registerLogAction.setMessage("*** WARNING STARTED");
            this.registerLogAction.doAction();
        }

    }


    @Override
    public synchronized void onWarningEnded(WarningEndedEvent e)
    {
        this.timer.stop();
        
        if(this.optionsWindow.options.isActionRegisterLogEnabled())
        {
            this.registerLogAction.setMessage("*** WARNING ENDED");
            this.registerLogAction.doAction();
        }
        
    }


    @Override
    public synchronized void onWarningSignal(WarningSignalEvent e)
    {
        this.pendingSeconds = this.optionsWindow.options.getWarningDuration() + 1;
        
        if(this.optionsWindow.options.isActionRegisterLogEnabled())
        {
            this.registerLogAction.setMessage("Movement detected ( "+(e.getDetector().getImageDifference().getDifferencePercent()) + " intensity )");
            this.registerLogAction.doAction();
        }
        
        if(this.optionsWindow.options.isActionPlayBeepSoundEnabled())
            this.playBeepAction.doAction();
        
        if(this.optionsWindow.options.isActionSaveFramesEnabled())
        {
            this.saveFrameAction.setUseFaceDetection(this.optionsWindow.options.isActionSaveFramesUseFaceDetection());
            this.saveFrameAction.setFrame(e.getDetector().getLastFrame());
            this.saveFrameAction.doAction();
        }
        
        if(this.optionsWindow.options.isActionExecuteCommandEnabled())
        {
            this.executeCommandAction.setCommand(this.optionsWindow.options.getActionExecuteCommandText());
            this.executeCommandAction.doAction();
        }
    }


    @Override
    public void onDetectorStateChanged(DetectorStateChangedEvent e)
    {
        switch(e.getNewState())
        {
            case STOPPED:
                this.detector.destroy();
                this.detector = null;
                this.btn_start.setEnabled(true);
                this.btn_stop.setEnabled(false);
                this.lbl_warning.setText("");
                this.lbl_warning.setIcon(this.iconOk);
                this.lbl_warning.setForeground(Color.GREEN);
                break;
            
            case STARTED:
            case CAPTURING:
                this.btn_start.setEnabled(false);
                this.btn_stop.setEnabled(true);
                this.lbl_warning.setText("");
                this.lbl_warning.setIcon(this.iconCapturing);
                this.lbl_warning.setForeground(Color.BLACK);
                break;
                
            case WARNING:
                this.btn_start.setEnabled(false);
                this.btn_stop.setEnabled(true);
                this.lbl_warning.setText("");
                this.lbl_warning.setIcon(this.iconWarning);
                this.lbl_warning.setForeground(Color.RED);
                break;
        }
    }
}
